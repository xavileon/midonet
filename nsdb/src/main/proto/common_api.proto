// Copyright (C) 2016, Midokura SARL

// This file contain common protocol elements for several APIs
package org.midonet.mem.api.common.api;

option java_package = "org.midonet.cluster.api.common";
option java_outer_classname = "Api";

// Common principles:
// -----------------
//
// All requests encapsulate commands, which have a compulsory req_id field.
// This id must be generated by the client and its only purpose is to be
// able to associate a particular request with its corresponding Responses.
// Requests usually contain a 'oneof' selection of the generic commands below,
// and any additional protocol-specific command messages.
//
// All responses have a req_id field matching the corresponding request,
// and a compulsory field indicating the type of response, which may be:
//  - ACK: the request was accepted
//  - NACK: the request was denied
//  - ERROR: the request was accepted, but an error condition prevented the
//    service from fulfilling the request
//  - DATA: the response contains the result of a query; this implies an
//    implicit ACK
// Responses of type NACK and ERROR may contain a payload of type Info,
// containing additional information about the cause of the error response.
// DATA responses to protocol-specific commands may contain different payloads;
// usually, a 'oneof' construct is used to select the appropriate message.

// --------------------------- REQUESTS ------------------------------

// Hanshake procedure:
// ------------------
// The client should send a "Handshake" command inside a "Request" message.
// The handshake should contain a request id to identify the related response,
// and possibly authentication information.
// After sending the "Handshake" command, the client may receive:
//  - A "Response" message containing an "Ack", if the handshake was
//    successful.
//  - A "Response" message containing a "NAck", if the handshake failed.
//    The most likely reason for a failure is bad or insufficient
//    authentication information. The client can retry to send another
//    "Handshake" with correct information.
message Handshake {
    required int64 req_id = 1;  // Request id
    optional string auth = 2;   // Authentication/Authorisation token, if any
    repeated string extra = 3;  // Additional handshake data (api-specific)
}

// Termination
// -----------
//
// A client can gracefully terminate the connection by issuing a "Request"
// message containing a "Bye" command. This request terminates the session
// and closes the connection from the server side. No answer should be
// expected by the client, apart from the close of the channel.
//
message Bye {
    required int64 req_id = 1;  // Request id
}

// Re-Authentication
// -----------------
//
// In case of expiration of the authentication token, the client should send
// an "Auth" command inside a "Request" message. It should contain a request
// id to identify the related response, and an authentication token.
// After sending the "Auth" command, the client may receive:
//  - A "Response" message containing an "Ack", if the authentication was
//    successful.
//  - A "Response" message containing a "NAck", if the authentication failed.
//    The most likely reason for a failure is bad or insufficient
//    authentication information. The client can retry to send another
//    "Auth" with correct information.
message Auth {
    required int64 req_id = 1;  // Request id
    optional string auth = 2;   // Authentication/Authorisation token, if any
}

// --------------------------- RESPONSES -----------------------------

// "Response" messages are sent from the service to clients in response to
// "Request" messages.

// Response types
enum ResponseType {
    ACK = 1;      // Request has been accepted
    NACK = 2;     // Request has been denied (e.g. unauthorised)
    ERROR = 3;    // Error condition
    DATA = 4;     // Response containing payload data.
}

// Error Codes
enum ErrorCode {
    OK = 1;               // No error.
    INTERNAL_ERROR = 2;   // Request failed due to an internal error.
    ACCESS_DENIED = 3;    // Authentication/Authorisation invalid or expired.
    INVALID_ARGUMENT = 4; // Request contains an invalid argument.
    NOT_AVAILABLE = 5;    // Backend service not available.
    NOT_FOUND = 6;        // Requested data not found.
    NO_DATA = 7;          // No data available.
}

// Additional Error information
message ErrorInfo {
    optional ErrorCode code = 1; // Error code.
    optional string msg = 2;     // Error message.
    repeated string extra = 3;   // Additional error information.
}

// ------------------- GENERIC OBJECTS (testing) ---------------------
// Each specific protocol should implement its own Request/Response messages,
// having at least the fields of these generic objects.
message Request {
    oneof request {
        Handshake handshake = 1;
        Bye bye = 2;
        Auth auth = 3;
    }
}

// "Response" messages are sent from the service to clients in response to
// "Request" messages.

message Response {
    required int64 req_id = 1;          // Matching request id
    required ResponseType type = 2;  // Type of response
    oneof payload {
        ErrorInfo error = 3;         // Error information
    }
}